# this file is HEAVILY influenced by https://github.com/onqtam/doctest/blob/master/.travis.yml

dist: trusty
language: cpp

git:
  depth: 500

addons:
  apt:
    sources: &apt_sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-8
      - llvm-toolchain-trusty-9

jobs:
  include:
    # coverage
    - env: COMPILER=g++-8 CODE_COVERAGE=true
      compiler: gcc
      os: linux
      addons: &gcc8
        apt:
          packages: ["g++-8",   "g++-8-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386"]
          sources: *apt_sources

    # GCC 8 x86
    - env: COMPILER=g++-8 ARCH=x86 SANITIZER_CXX_FLAGS="-fuse-ld=gold" TSAN_CXX_FLAGS="-ltsan"
      compiler: gcc
      os: linux
      addons: &gcc8
        apt:
          packages: ["g++-8",   "g++-8-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386", "valgrind"]
          sources: *apt_sources

    # GCC 8 x64
    - env: COMPILER=g++-8 ARCH=x64 SANITIZER_CXX_FLAGS="-fuse-ld=gold" TSAN_CXX_FLAGS="-ltsan"
      compiler: gcc
      os: linux
      addons: &gcc8
        apt:
          packages: ["g++-8",   "g++-8-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386", "valgrind"]
          sources: *apt_sources

    # GCC 9 x86
    - env: COMPILER=g++-9 ARCH=x86 SANITIZER_CXX_FLAGS="-fuse-ld=gold" TSAN_CXX_FLAGS="-ltsan"
      compiler: gcc
      os: linux
      addons: &gcc9
        apt:
          packages: ["g++-9",   "g++-9-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386", "valgrind"]
          sources: *apt_sources

    # GCC 9 x64
    - env: COMPILER=g++-9 ARCH=x64 SANITIZER_CXX_FLAGS="-fuse-ld=gold" TSAN_CXX_FLAGS="-ltsan"
      compiler: gcc
      os: linux
      addons: &gcc9
        apt:
          packages: ["g++-9",   "g++-9-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386", "valgrind"]
          sources: *apt_sources

    # Clang 8.0 x86
    - env: COMPILER=clang++-8 ARCH=x86
      compiler: clang
      os: linux
      addons: &clang8
        apt:
          packages: ["clang-8", "g++-8-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386", "valgrind"]
          sources: *apt_sources

    # Clang 8.0 x64
    - env: COMPILER=clang++-8 ARCH=x64
      compiler: clang
      os: linux
      addons: &clang8
        apt:
          packages: ["clang-8", "g++-8-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386", "valgrind"]
          sources: *apt_sources

    # Clang 9.0 x86
    - env: COMPILER=clang++-9 ARCH=x86
      compiler: clang
      os: linux
      addons: &clang9
        apt:
          packages: ["clang-9", "g++-8-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386", "valgrind"]
          sources: *apt_sources

    # Clang 9.0 x64
    - env: COMPILER=clang++-9 ARCH=x64
      compiler: clang
      os: linux
      addons: &clang9
        apt:
          packages: ["clang-9", "g++-8-multilib", "libc6-dbg", "libc6-dbg:i386", "linux-libc-dev", "linux-libc-dev:i386", "valgrind"]
          sources: *apt_sources

    # Xcode 10.2 Clang x64
    - env: COMPILER=clang++ ARCH=x64
      compiler: clang
      osx_image: xcode10.2
      os: osx

    # Xcode 10.3 Clang x64
    - env: COMPILER=clang++ ARCH=x64
      compiler: clang
      osx_image: xcode10.3
      os: osx

    # Xcode 11 Clang x64
    - env: COMPILER=clang++ ARCH=x64
      compiler: clang
      osx_image: xcode11
      os: osx

    # Xcode 11.1 Clang x64
    - env: COMPILER=clang++ ARCH=x64
      compiler: clang
      osx_image: xcode11.1
      os: osx

    # Xcode 11.2 Clang x64
    - env: COMPILER=clang++ ARCH=x64
      compiler: clang
      osx_image: xcode11.2
      os: osx

    # Xcode 11.3 Clang x64
    - env: COMPILER=clang++ ARCH=x64
      compiler: clang
      osx_image: xcode11.3
      os: osx

install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################

  # Make a directory for all
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}

  # Install a recent CMake
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://www.cmake.org/files/v3.14/cmake-3.14.4-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi

  # Install lcov
  - |
    if [[ "${CODE_COVERAGE}" = "true" ]]; then
      LCOV_URL="https://github.com/linux-test-project/lcov/releases/download/v1.14/lcov-1.14.tar.gz"
      mkdir lcov && travis_retry wget --no-check-certificate -O - ${LCOV_URL} | tar --strip-components=1 -xz -C lcov
      cd lcov
      make install
      export PATH=${DEPS_DIR}/lcov/bin:${PATH}
    fi

  # Go back to ${TRAVIS_BUILD_DIR}
  - cd ${TRAVIS_BUILD_DIR}

  ############################################################################
  # Install stuff with homebrew under OSX
  ############################################################################

  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
      # brew install ccache
      # brew install valgrind
      # cmake
      if brew list -1 | grep -q "^cmake\$"; then
        brew outdated cmake || brew upgrade cmake
      else
        brew install cmake
      fi
    fi
  # export CXX compiler
  - export CXX="${COMPILER}"
#  - export CXX="ccache ${COMPILER}"
#  - ccache -s

before_script:
  - ${CXX} --version
  - cmake --version

script:
  ############################################################################
  # code coverage
  ############################################################################

  - |
    if [[ "${CODE_COVERAGE}" = "true" ]]; then
      # Display version
      lcov --version
      gcov --version
      # Build
      cmake -DCMAKE_CXX_COMPILER=${CXX} -DCMAKE_BUILD_TYPE=Debug -DARCH=x86 -DCMAKE_CXX_FLAGS="-g -O0 -fprofile-arcs -ftest-coverage --coverage" . || exit 1
      cmake --build . -- -j2 || exit 1
      ctest -j2 --output-on-failure || exit 1
      # lcov
      lcov --directory . --capture --output-file coverage.info --gcov-tool gcov-8 # capture coverage info
      lcov --remove coverage.info "/usr/*" --output-file coverage.info # filter out system
      lcov --remove coverage.info "$(readlink -f test)/*" --output-file coverage.info # filter out tests
      lcov --list coverage.info # debug info
      # Uploading report to CodeCov
      bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"
      # do not continue with other build configurations after that
      exit
    fi

  # initial run with options
  - cmake ${CMAKE_OPTIONS_GLOBAL} ${CMAKE_OPTIONS} -DCMAKE_CXX_COMPILER=${CXX} -DARCH=${ARCH} .

  ############################################################################
  # Debug
  ############################################################################

  - cmake -DCMAKE_BUILD_TYPE=Debug .
  - cmake --build . --clean-first -- -j2
  - ctest -j2 --output-on-failure .

  ############################################################################
  # Release
  ############################################################################

  - cmake -DCMAKE_BUILD_TYPE=Release .
  - cmake --build . --clean-first -- -j2
  - ctest -j2 --output-on-failure .

  ############################################################################
  # Addres Sanitizers
  ############################################################################

  - export ASAN_OPTIONS=verbosity=2:strict_string_checks=true:detect_odr_violation=2:detect_stack_use_after_return=true:check_initialization_order=true:strict_init_order=true
  # Debug
  - cmake -DCMAKE_BUILD_TYPE=Debug   -DCMAKE_CXX_FLAGS="${SANITIZER_CXX_FLAGS} -g -fno-omit-frame-pointer -fsanitize=address"                             . && cmake --build . --clean-first -- -j2 && ctest -j2 --output-on-failure
  # Release
  - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="${SANITIZER_CXX_FLAGS} -g -fno-omit-frame-pointer -fsanitize=address"                             . && cmake --build . --clean-first -- -j2 && ctest -j2 --output-on-failure

  ############################################################################
  # Undefined Behaviour Sanitizer
  ############################################################################

  - export UBSAN_OPTIONS=verbosity=2
  # Debug
  - cmake -DCMAKE_BUILD_TYPE=Debug   -DCMAKE_CXX_FLAGS="${SANITIZER_CXX_FLAGS} -g -fno-omit-frame-pointer -fsanitize=undefined"                           . && cmake --build . --clean-first -- -j2 && ctest -j2 --output-on-failure
  # Release
  - cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="${SANITIZER_CXX_FLAGS} -g -fno-omit-frame-pointer -fsanitize=undefined"                           . && cmake --build . --clean-first -- -j2 && ctest -j2 --output-on-failure

  ############################################################################
  # Thread Sanitizer
  ############################################################################

  #- export TSAN_OPTIONS=verbosity=2:force_seq_cst_atomics=1
  # Debug
  #- cmake -DCMAKE_BUILD_TYPE=Debug   -DCMAKE_CXX_FLAGS="${SANITIZER_CXX_FLAGS} -g -fno-omit-frame-pointer -fsanitize=thread -Wl,-pie -fPIE ${TSAN_CXX_FLAGS}" . && cmake --build . --clean-first -- -j2 && ctest -j2 --output-on-failure
  # Release
  #- cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="${SANITIZER_CXX_FLAGS} -g -fno-omit-frame-pointer -fsanitize=thread -Wl,-pie -fPIE ${TSAN_CXX_FLAGS}" . && cmake --build . --clean-first -- -j2 && ctest -j2 --output-on-failure
